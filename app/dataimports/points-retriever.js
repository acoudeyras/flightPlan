// Generated by CoffeeScript 1.6.2
'use strict';
var airportsUrl, extractRowsFromPage, findRows, phantomEval, vorsUrl;

phantomEval = require('./phantomjs-evaluator');

airportsUrl = 'http://www.jprendu.fr/aeroweb/_private/21_JpRNavMaster/NavMasterSearch.php?SearchMode=V&ButtonType=0&CountryCode=LF&Departement=%&Langue=Fr&Orig=Advanced_Fr&Retry=0&SortedOn=Name&SortDesc=ASC';

vorsUrl = 'http://www.jprendu.fr/aeroweb/_private/21_JpRNavMaster/NavMasterSearch.php?SearchMode=V&ButtonType=5&CountryCode=LF&Departement=NA&Langue=Fr&Orig=Advanced_Fr&Retry=0&SortedOn=Name&SortDesc=ASC';

extractRowsFromPage = function() {
  var column, currentColumn, currentRow, dataTable, field, fields, readUrl, result, row, rowJson, rows, skip, _i, _j, _len, _len1, _ref;

  readUrl = function(columnNode) {
    var href, link;

    link = column.children[0].children[0];
    href = link.outerHTML.split('onclick="window.open(')[1];
    href = href.substring(1, href.length);
    return href.split("',")[0];
  };
  fields = ['country', 'code', 'category', 'info', 'altitude', 'latitude', 'longitude'];
  result = [];
  dataTable = document.querySelectorAll('table')[1];
  rows = dataTable.children[0].children;
  skip = 2;
  currentRow = -1;
  for (_i = 0, _len = rows.length; _i < _len; _i++) {
    row = rows[_i];
    currentRow++;
    if (currentRow < skip) {
      continue;
    }
    currentColumn = 0;
    rowJson = {};
    _ref = row.children;
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      column = _ref[_j];
      field = fields[currentColumn];
      rowJson[field] = column.innerText;
      if (field === 'code') {
        rowJson.url = readUrl(column);
      }
      currentColumn++;
    }
    result.push(rowJson);
  }
  return result;
};

findRows = function(url, callback) {
  return phantomEval.loadPage(url, extractRowsFromPage, callback);
};

exports.pointList = function(callback) {
  return findRows(airportsUrl, function(err, airports) {
    if (err) {
      return callback(err);
    }
    return findRows(vorsUrl, function(err, vors) {
      if (err) {
        return callback(err);
      }
      return callback(null, vors.concat(airports));
    });
  });
};
