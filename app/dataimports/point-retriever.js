// Generated by CoffeeScript 1.6.2
'use strict';
var airportCategories, allCategories, extract, phantomEval, vorsCategories,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

phantomEval = require('./phantomjs-evaluator');

airportCategories = ['CAP', 'CAP/Mil'];

vorsCategories = ['VOR', 'VOR/DME', 'VORTAC'];

allCategories = airportCategories.concat(vorsCategories);

extract = function() {
  var aiportMapping, colsReader, findReader, findType, readRows, reader, table, typeReader, vorMapping;

  airportCategories = ['CAP', 'CAP/Mil'];
  vorsCategories = ['VOR', 'VOR/DME', 'VORTAC'];
  aiportMapping = {
    'Déclinaison': 'declination',
    'Altitude': 'altitude',
    'CONTACTS Téléphoniques': 'phoneContacts',
    'Code Immat. des appareils': 'codeImmat',
    'Code Pays': 'countryCode',
    'Date carte VAC': 'vacMapCreated',
    'Département': 'departement',
    'Frequence App.': 'approachFrequency',
    'Fréquence principale': 'mainFrequency',
    'Informations Contact CARBURANT': 'fuelInfos',
    'Informations PISTES': 'runwayInfos',
    'Localisation radionav.': 'radionavLocalization',
    'Latitude': 'lat',
    'Longitude': 'long',
    'Nom': 'name',
    'Type': 'typeLng'
  };
  vorMapping = {
    'Date MàJ': 'updated',
    'Déclinaison': 'declination',
    'Fréquence principale': 'frequency',
    'Latitude': 'lat',
    'Longitude': 'long',
    'Nom': 'name',
    'Type': 'typeLng'
  };
  typeReader = function(columns, rowObj) {
    var colName, name, value;

    if (columns.length < 2) {
      return;
    }
    name = columns[0], value = columns[1];
    colName = name.innerText.trim();
    if (colName === 'Catégorie') {
      return rowObj.type = value.innerText.trim();
    }
  };
  colsReader = function(mapping) {
    return function(columns, rowObj) {
      var colName, name, value;

      if (columns.length < 2) {
        return;
      }
      name = columns[0], value = columns[1];
      name = name.innerText.trim();
      value = value.innerText.trim();
      colName = mapping[name];
      if (!colName) {
        return rowObj['_' + name] = value;
      } else {
        return rowObj[colName] = value;
      }
    };
  };
  findType = function(table) {
    var found;

    found = readRows(table, 2, typeReader);
    return found.type;
  };
  findReader = function(table) {
    var type;

    type = findType(table);
    if (vorsCategories.indexOf(type) !== -1) {
      return colsReader(vorMapping);
    } else if (airportCategories.indexOf(type) !== -1) {
      return colsReader(aiportMapping);
    } else {
      return null;
    }
  };
  readRows = function(table, skip, columnsReader) {
    var currentRow, result, row, rows, _i, _len;

    result = {};
    rows = table.children[0].children;
    skip = skip || 0;
    currentRow = -1;
    for (_i = 0, _len = rows.length; _i < _len; _i++) {
      row = rows[_i];
      currentRow++;
      if (currentRow < skip) {
        continue;
      }
      columnsReader(row.children, result);
    }
    return result;
  };
  table = document.querySelectorAll('table')[0];
  reader = findReader(table);
  if (!reader) {
    return null;
  }
  return readRows(table, 2, reader);
};

exports.getPoint = function(point, callback) {
  var _ref;

  if (_ref = point.category, __indexOf.call(allCategories, _ref) < 0) {
    return callback("Category " + point.category + " not yet supported", null);
  }
  return phantomEval.loadPage(point.url, extract, callback);
};
