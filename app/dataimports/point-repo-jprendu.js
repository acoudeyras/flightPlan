// Generated by CoffeeScript 1.6.2
'use strict';
var extract, phantomEval;

phantomEval = require('./phantomjs-evaluator');

extract = function() {
  var airportCategories, airportMapping, colsReader, findReader, findType, readRows, reader, table, typeReader, vorMapping, vorsCategories;

  airportCategories = ['CAP', 'CAP/Mil'];
  vorsCategories = ['VOR', 'VOR/DME', 'VORTAC'];
  airportMapping = {
    'Déclinaison': 'declination',
    'Altitude': 'altitude',
    'CONTACTS Téléphoniques': 'phoneContacts',
    'Code Immat. des appareils': 'codeImmat',
    'Code Pays': 'countryCode',
    'Date carte VAC': 'vacMapCreated',
    'Département': 'departement',
    'Frequence App.': 'approachFrequency',
    'Fréquence principale': 'mainFrequency',
    'Informations Contact CARBURANT': 'fuelInfos',
    'Informations PISTES': 'runwayInfos',
    'Localisation radionav.': 'radionavLocalization',
    'Latitude': 'lat',
    'Longitude': 'long',
    'Nom': 'name',
    'Type': 'typeLng',
    'Remarques': 'remarks',
    'Restaurant': 'restaurant',
    'Restaurant N° 1': 'restaurant',
    'Restaurant N° 2': 'restaurant',
    'Hôtel-Restaurant': 'hotelRestaurant',
    'F.I.S.': 'fis',
    'Frequence Sol': 'groundFrequency',
    'Fréquence ATIS': 'frequencyAtis',
    'Téléphone ATIS': 'atisPhone',
    'Afficher la vue SATELLITE\navec Google Maps\n(image de Google Earth)': null,
    'Catégorie': null,
    'Code': null,
    'Créé/Modifié par': null,
    'Origine des données': null,
    'Region du monde': null
  };
  vorMapping = {
    'Date MàJ': 'updated',
    'Code Pays': 'countryCode',
    'Altitude': 'altitude',
    'Déclinaison': 'declination',
    'Fréquence principale': 'frequency',
    'Latitude': 'lat',
    'Longitude': 'long',
    'Nom': 'name',
    'Type': 'typeLng',
    'Afficher la vue SATELLITE\navec Google Maps\n(image de Google Earth)': null,
    'Catégorie': null,
    'Code': null,
    'Créé/Modifié par': null,
    'Origine des données': null,
    'Region du monde': null
  };
  typeReader = function(columns, rowObj) {
    var colName, name, value;

    if (columns.length < 2) {
      return;
    }
    name = columns[0], value = columns[1];
    colName = name.innerText.trim();
    if (colName === 'Catégorie') {
      return rowObj.type = value.innerText.trim();
    }
  };
  colsReader = function(mapping) {
    return function(columns, rowObj) {
      var colName, currentValue, name, value;

      if (columns.length < 2) {
        return;
      }
      name = columns[0], value = columns[1];
      name = name.innerText.trim();
      value = value.innerText.trim();
      colName = mapping[name];
      if (colName === null) {
        return;
      }
      if (!colName) {
        return rowObj['_' + name] = value;
      } else {
        currentValue = rowObj[colName];
        if (currentValue == null) {
          return rowObj[colName] = value;
        } else {
          if (Array.isArray(currentValue)) {
            return currentValue.push(value);
          } else {
            return rowObj[colName] = [currentValue, value];
          }
        }
      }
    };
  };
  findType = function(table) {
    var found;

    found = readRows(table, 2, typeReader);
    return found.type;
  };
  findReader = function(table) {
    var type;

    type = findType(table);
    if (vorsCategories.indexOf(type) !== -1) {
      return colsReader(vorMapping);
    } else if (airportCategories.indexOf(type) !== -1) {
      return colsReader(airportMapping);
    } else {
      return colsReader({});
    }
  };
  readRows = function(table, skip, columnsReader) {
    var currentRow, result, row, rows, _i, _len;

    result = {};
    rows = table.children[0].children;
    skip = skip || 0;
    currentRow = -1;
    for (_i = 0, _len = rows.length; _i < _len; _i++) {
      row = rows[_i];
      currentRow++;
      if (currentRow < skip) {
        continue;
      }
      columnsReader(row.children, result);
    }
    return result;
  };
  table = document.querySelectorAll('table')[0];
  reader = findReader(table);
  if (!reader) {
    return null;
  }
  return readRows(table, 2, reader);
};

exports.getPoint = function(point, callback) {
  return phantomEval.loadPage(point.url, extract, callback);
};
